//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RoyaltyService.Tests.FileServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Result", Namespace="http://schemas.datacontract.org/2004/07/RoyaltyService.Model")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(RoyaltyService.Tests.FileServiceReference.ResultWithValues))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(RoyaltyService.Tests.FileServiceReference.FileInfoResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(RoyaltyService.Tests.FileServiceReference.ResultWithValue))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(RoyaltyService.Tests.FileServiceReference.FileInfoResult))]
    public partial class Result : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorField, value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResultWithValues", Namespace="http://schemas.datacontract.org/2004/07/RoyaltyService.Model")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(RoyaltyService.Tests.FileServiceReference.FileInfoResults))]
    public partial class ResultWithValues : RoyaltyService.Tests.FileServiceReference.Result {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private RoyaltyService.Tests.FileServiceReference.FileInfo[] ValuesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RoyaltyService.Tests.FileServiceReference.FileInfo[] Values {
            get {
                return this.ValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.ValuesField, value) != true)) {
                    this.ValuesField = value;
                    this.RaisePropertyChanged("Values");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileInfoResults", Namespace="http://schemas.datacontract.org/2004/07/RoyaltyService.Services.File")]
    [System.SerializableAttribute()]
    public partial class FileInfoResults : RoyaltyService.Tests.FileServiceReference.ResultWithValues {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResultWithValue", Namespace="http://schemas.datacontract.org/2004/07/RoyaltyService.Model")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(RoyaltyService.Tests.FileServiceReference.FileInfoResult))]
    public partial class ResultWithValue : RoyaltyService.Tests.FileServiceReference.Result {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private RoyaltyService.Tests.FileServiceReference.FileInfo ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RoyaltyService.Tests.FileServiceReference.FileInfo Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileInfoResult", Namespace="http://schemas.datacontract.org/2004/07/RoyaltyService.Services.File")]
    [System.SerializableAttribute()]
    public partial class FileInfoResult : RoyaltyService.Tests.FileServiceReference.ResultWithValue {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileInfo", Namespace="http://schemas.datacontract.org/2004/07/RoyaltyService.Model")]
    [System.SerializableAttribute()]
    public partial class FileInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EncodingField;
        
        private string FileIDField;
        
        private string FileNameField;
        
        private long FileSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MimePreviewFileNameBigField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MimePreviewFileNameSmallField;
        
        private string MimeTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Encoding {
            get {
                return this.EncodingField;
            }
            set {
                if ((object.ReferenceEquals(this.EncodingField, value) != true)) {
                    this.EncodingField = value;
                    this.RaisePropertyChanged("Encoding");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string FileID {
            get {
                return this.FileIDField;
            }
            set {
                if ((object.ReferenceEquals(this.FileIDField, value) != true)) {
                    this.FileIDField = value;
                    this.RaisePropertyChanged("FileID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long FileSize {
            get {
                return this.FileSizeField;
            }
            set {
                if ((this.FileSizeField.Equals(value) != true)) {
                    this.FileSizeField = value;
                    this.RaisePropertyChanged("FileSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MimePreviewFileNameBig {
            get {
                return this.MimePreviewFileNameBigField;
            }
            set {
                if ((object.ReferenceEquals(this.MimePreviewFileNameBigField, value) != true)) {
                    this.MimePreviewFileNameBigField = value;
                    this.RaisePropertyChanged("MimePreviewFileNameBig");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MimePreviewFileNameSmall {
            get {
                return this.MimePreviewFileNameSmallField;
            }
            set {
                if ((object.ReferenceEquals(this.MimePreviewFileNameSmallField, value) != true)) {
                    this.MimePreviewFileNameSmallField = value;
                    this.RaisePropertyChanged("MimePreviewFileNameSmall");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string MimeType {
            get {
                return this.MimeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MimeTypeField, value) != true)) {
                    this.MimeTypeField = value;
                    this.RaisePropertyChanged("MimeType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileServiceReference.IFileService")]
    public interface IFileService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/Get", ReplyAction="http://tempuri.org/IFileService/GetResponse")]
        RoyaltyService.Tests.FileServiceReference.FileInfoResult Get(string fileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/Get", ReplyAction="http://tempuri.org/IFileService/GetResponse")]
        System.Threading.Tasks.Task<RoyaltyService.Tests.FileServiceReference.FileInfoResult> GetAsync(string fileId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFileService/Delete")]
        void Delete(string fileId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFileService/Delete")]
        System.Threading.Tasks.Task DeleteAsync(string fileId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFileService/ChangeLanguage")]
        void ChangeLanguage(string codename);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFileService/ChangeLanguage")]
        System.Threading.Tasks.Task ChangeLanguageAsync(string codename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/GetRange", ReplyAction="http://tempuri.org/IFileService/GetRangeResponse")]
        RoyaltyService.Tests.FileServiceReference.FileInfoResults GetRange(string[] fileIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/GetRange", ReplyAction="http://tempuri.org/IFileService/GetRangeResponse")]
        System.Threading.Tasks.Task<RoyaltyService.Tests.FileServiceReference.FileInfoResults> GetRangeAsync(string[] fileIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/GetSource", ReplyAction="http://tempuri.org/IFileService/GetSourceResponse")]
        System.IO.Stream GetSource(string fileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/GetSource", ReplyAction="http://tempuri.org/IFileService/GetSourceResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetSourceAsync(string fileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/GetSourceByName", ReplyAction="http://tempuri.org/IFileService/GetSourceByNameResponse")]
        System.IO.Stream GetSourceByName(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/GetSourceByName", ReplyAction="http://tempuri.org/IFileService/GetSourceByNameResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetSourceByNameAsync(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/Put", ReplyAction="http://tempuri.org/IFileService/PutResponse")]
        RoyaltyService.Tests.FileServiceReference.FileInfoResult Put(System.IO.Stream content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/Put", ReplyAction="http://tempuri.org/IFileService/PutResponse")]
        System.Threading.Tasks.Task<RoyaltyService.Tests.FileServiceReference.FileInfoResult> PutAsync(System.IO.Stream content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/Update", ReplyAction="http://tempuri.org/IFileService/UpdateResponse")]
        RoyaltyService.Tests.FileServiceReference.FileInfoResult Update(string fileId, string fileName, string encoding, string mime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/Update", ReplyAction="http://tempuri.org/IFileService/UpdateResponse")]
        System.Threading.Tasks.Task<RoyaltyService.Tests.FileServiceReference.FileInfoResult> UpdateAsync(string fileId, string fileName, string encoding, string mime);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileServiceChannel : RoyaltyService.Tests.FileServiceReference.IFileService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileServiceClient : System.ServiceModel.ClientBase<RoyaltyService.Tests.FileServiceReference.IFileService>, RoyaltyService.Tests.FileServiceReference.IFileService {
        
        public FileServiceClient() {
        }
        
        public FileServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public RoyaltyService.Tests.FileServiceReference.FileInfoResult Get(string fileId) {
            return base.Channel.Get(fileId);
        }
        
        public System.Threading.Tasks.Task<RoyaltyService.Tests.FileServiceReference.FileInfoResult> GetAsync(string fileId) {
            return base.Channel.GetAsync(fileId);
        }
        
        public void Delete(string fileId) {
            base.Channel.Delete(fileId);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(string fileId) {
            return base.Channel.DeleteAsync(fileId);
        }
        
        public void ChangeLanguage(string codename) {
            base.Channel.ChangeLanguage(codename);
        }
        
        public System.Threading.Tasks.Task ChangeLanguageAsync(string codename) {
            return base.Channel.ChangeLanguageAsync(codename);
        }
        
        public RoyaltyService.Tests.FileServiceReference.FileInfoResults GetRange(string[] fileIds) {
            return base.Channel.GetRange(fileIds);
        }
        
        public System.Threading.Tasks.Task<RoyaltyService.Tests.FileServiceReference.FileInfoResults> GetRangeAsync(string[] fileIds) {
            return base.Channel.GetRangeAsync(fileIds);
        }
        
        public System.IO.Stream GetSource(string fileId) {
            return base.Channel.GetSource(fileId);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetSourceAsync(string fileId) {
            return base.Channel.GetSourceAsync(fileId);
        }
        
        public System.IO.Stream GetSourceByName(string fileName) {
            return base.Channel.GetSourceByName(fileName);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetSourceByNameAsync(string fileName) {
            return base.Channel.GetSourceByNameAsync(fileName);
        }
        
        public RoyaltyService.Tests.FileServiceReference.FileInfoResult Put(System.IO.Stream content) {
            return base.Channel.Put(content);
        }
        
        public System.Threading.Tasks.Task<RoyaltyService.Tests.FileServiceReference.FileInfoResult> PutAsync(System.IO.Stream content) {
            return base.Channel.PutAsync(content);
        }
        
        public RoyaltyService.Tests.FileServiceReference.FileInfoResult Update(string fileId, string fileName, string encoding, string mime) {
            return base.Channel.Update(fileId, fileName, encoding, mime);
        }
        
        public System.Threading.Tasks.Task<RoyaltyService.Tests.FileServiceReference.FileInfoResult> UpdateAsync(string fileId, string fileName, string encoding, string mime) {
            return base.Channel.UpdateAsync(fileId, fileName, encoding, mime);
        }
    }
}
